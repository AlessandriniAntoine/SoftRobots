# -*- coding: utf-8 -*-

import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../'
pathMesh = os.path.dirname(os.path.abspath(__file__))+'/../mesh/'


def createScene(rootNode):

                rootNode.addObject('RequiredPlugin', pluginName='SoftRobots SofaOpenglVisual')
                rootNode.addObject('OglSceneFrame', style='Arrows', alignment='TopRight')
                rootNode.addObject('BackgroundSetting', color=[0, 0.168627, 0.211765, 1])

                point = rootNode.addChild('point')
                point.addObject('EulerImplicitSolver', firstOrder=True)
                point.addObject('CGLinearSolver', iterations=100, tolerance=1e-5, threshold=1e-5)
                point.addObject('MechanicalObject', template='Rigid3',
                        position=[0, 0, 0, 0, 0, 0, 1],
                        showObject=True,
                        showObjectScale=0.1,
                        drawMode=1,
                        showColor=[255, 255, 255, 255])
                ## The AnimationEditor takes multiple options
                # template : should be the same as the mechanical you want to animate
                # filename : file in which the animation will be saved
                # load : set to true to load the animation at init (default is true)
                # loop : when the animation is playing, set this option to true to loop and start again the animation
                # dx : to control the animation in displacement instead of time
                # frameTime (default is 0.01)
                # drawTimeline (default is true)
                # drawTrajectory (default is true)
                # drawSize : coeff size of diplayed elements of trajectory
                point.addObject('AnimationEditor', name='animation',
                template='Rigid3', filename=path+'RigidAnimation.txt',
                load=True,
                drawTimeline=True, drawTrajectory=True)

                visu = point.addChild('visu')
                visu.addObject('MeshObjLoader', name='loader', filename='mesh/cube.obj')
                visu.addObject('OglModel', src='@loader', filename='mesh/cube.obj')
                visu.addObject('RigidMapping')

                return rootNode
