# -*- coding: utf-8 -*-

import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

def createScene(rootNode):
                rootNode.addObject('RequiredPlugin', pluginName='SoftRobots')
                rootNode.addObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

                rootNode.addObject('BackgroundSetting', color=[0, 0.168627, 0.211765])
                rootNode.addObject('OglSceneFrame', style="Arrows", alignment="TopRight")

                ##########################################
                # FEM Model                              #
                ##########################################
                finger = rootNode.addChild('finger')
                finger.addObject('EulerImplicitSolver')
                finger.addObject('CGLinearSolver')

                finger.addObject('MeshVTKLoader', name='loader', filename=path+'finger.vtk')
                finger.addObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
                finger.addObject('TetrahedronSetTopologyModifier')
                finger.addObject('TetrahedronSetTopologyAlgorithms', template='Vec3')
                finger.addObject('TetrahedronSetGeometryAlgorithms', template='Vec3', drawTetrahedra=True)

                # Add a mechanicaobject component to stores the DoFs of the model
                finger.addObject('MechanicalObject', name='tetras', template='Vec3', showTetra=True)
                finger.addObject('VolumeFromTetrahedrons')

                finger.addObject('TetrahedronFEMForceField')



                ##########################################
                # Visualization                          #
                ##########################################
                fingerVisu = finger.addChild('visu')
                fingerVisu.addObject('MeshSTLLoader', filename=path+"finger.stl", name="loader")
                fingerVisu.addObject('OglModel', src="@loader", template='ExtVec3f', color=[0.0, 0.7, 0.7, 0.5])
                fingerVisu.addObject('BarycentricMapping')

                return rootNode
